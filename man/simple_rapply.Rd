% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Devel.R
\name{simple_rapply}
\alias{simple_rapply}
\title{Alternative for rapply}
\usage{
simple_rapply(x, fn, ..., classes = "ANY", inclLists = F)
}
\arguments{
\item{x}{Any object, but usually a list (if not a list, the result is identical to calling fn(x, ...))}

\item{fn}{A function to apply over the elements of x}

\item{...}{Additional arguments passed on to fn}

\item{classes}{A character vector of class names, or "ANY" to match any class. Other classes are returned unmodified}

\item{inclLists}{Logical. Should fn be also applied to the lists themselves? see 'Examples'}
}
\value{
a list with the same structure as x, with fn applied over the elements
}
\description{
Function to be used as an alternative for rapply (recursive version of lapply)\cr
It differs in two important aspects:
\enumerate{
\item It handles NULL as a value, instead of seeing it as an empty list. See examples for comparison
\item If you set inclLists to TRUE, it also applies fn over the lists itself
}
}
\details{
Further note that this implementation is comparable to running rapply with how='replace'
}
\examples{
L <- list(l=list(m=4, o=NULL, n=3), p=list(NULL), q=c(t=6, r=4,s=5), k=1)
rapply(L, is.null, how='replace')
any(unlist(rapply(L, is.null, how='replace')))
simple_rapply(L, is.null)
any(unlist(rapply(L, is.null)))

rapply(L, function(x) {if(!is.null(names(x))) x[order(names(x))] else x}, how='replace')
simple_rapply(L, function(x) {if(!is.null(names(x))) x[order(names(x))] else x})
simple_rapply(L, function(x) {if(!is.null(names(x))) x[order(names(x))] else x}, inclLists=TRUE)
}
\seealso{
rapply
}
